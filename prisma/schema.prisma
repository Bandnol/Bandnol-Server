datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model UserLikedArtist {
  id        String    @id
  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @map("updated_at")
  artistId  Int?      @map("artist_id")
  artistName String?  @map("artist_name")
  userId    String?   @map("user_id")
  imgUrl    String?   @map("img_url")

  user      User?     @relation(fields: [userId], references: [id])
}

model Inquiry {
  id        String   @id
  email     String?  @db.VarChar(100)
  content   String?
  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @map("updated_at")
}

model RecomsSong {
  id         String   @id
  title      String?  @db.VarChar(100)
  artistName String?  @map("artist_name")
  imgUrl     String?  @map("img_url")

  userRecomsSongs UserRecomsSong[]
}

model Notification {
  id           String   @id
  content      String?
  createdAt    DateTime? @map("created_at")
  updatedAt    DateTime? @map("updated_at")
  type         String?   @db.VarChar(50)
  referenceId  String    @map("reference_id")
  isConfirmed  Boolean?  @map("is_confirmed")
  link         String?
  receiverId   String?   @map("receiver_id")
  senderId     String    @map("sender_id")

  sender   User? @relation("NotificationSender", fields: [senderId], references: [id])
  receiver User? @relation("NotificationReceiver", fields: [receiverId], references: [id])
}

model RecomsReply {
  id               String   @id
  content          String?
  createdAt        DateTime? @map("created_at")
  updatedAt        DateTime? @map("updated_at")
  userRecomsSongId String    @map("user_recoms_song_id")
  responderId      String?   @map("responder_id")

  userRecomsSong   UserRecomsSong @relation(fields: [userRecomsSongId], references: [id])
  responder        User? @relation(fields: [responderId], references: [id])
}

model UserRecomsSong {
  id           String     @id
  senderId     String?    @map("sender_id")
  recomsSongId String?    @map("recoms_song_id")
  receiverId   String?    @map("receiver_id")
  createdAt    DateTime?  @map("created_at")
  isAnoymous   Boolean?   @map("is_anoymous")
  isLiked      Boolean?   @map("is_liked")
  comment      String?

  recomsSong   RecomsSong? @relation(fields: [recomsSongId], references: [id])
  sender       User?       @relation("UserSentRecom", fields: [senderId], references: [id])
  receiver     User?       @relation("UserReceivedRecom", fields: [receiverId], references: [id])
  replies      RecomsReply[]
}

model User {
  id              String   @id
  socialType      String?  @map("social_type")
  ownId           String?  @map("own_id")
  nickname        String?  @db.VarChar(10)
  birth           DateTime?
  gender          String?
  recomsTime      String   @map("recoms_time") @default("09:00")
  photo           String?
  bio             String?
  tag             String?  @db.VarChar(5)
  qrCode          String?  @map("qr_code")
  backgroundImg   String   @map("background_img")
  createdAt       DateTime? @map("created_at")
  updatedAt       DateTime? @map("updated_at")
  inactiveAt      DateTime? @map("inactive_at") @default(now())
  inactiveStatus  Boolean?  @map("inactive_status") @default(false)

  sentRecoms      UserRecomsSong[] @relation("UserSentRecom")
  receivedRecoms  UserRecomsSong[] @relation("UserReceivedRecom")
  sentNotices     Notification[] @relation("NotificationSender")
  receivedNotices Notification[] @relation("NotificationReceiver")
  fcmTokens       FcmToken[]
  recomsReplies   RecomsReply[]
  likedArtist     UserLikedArtist[]
}

model FcmToken {
  id        String   @id
  fcmToken  String?  @map("fcm_token") @db.VarChar(512)
  userId    String?  @map("user_id")
  createdAt DateTime? @map("created_at")

  user User? @relation(fields: [userId], references: [id])
}