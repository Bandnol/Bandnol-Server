// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums
enum SocialType {
  google
  kakao
}

enum Gender {
  man
  woman
}

enum NotificationType {
  RECOMMEND_RECEIVED
  REPLY_RECEIVED
  POST_REACTION
  COMMUNITY_REACTION
  PERMISSION_UPDATE
  RECOMMEND_NOT_SENT
  ANNOUNCEMENT
}

// Models
model User {
  id              Int                @id @default(autoincrement())
  social_type     SocialType?
  name            String?
  nickname        String?
  birth           DateTime?
  gender          Gender?
  photo           String?
  bio             String?
  tag             String?
  qr_code         String?
  created_at      DateTime?          @default(now())
  updated_at      DateTime?          @updatedAt
  inactive_at     DateTime?
  inactive_status Boolean?           @default(false)

  posts           Post[]
  bookmarks       Bookmark[]
  follows         Follow[]           @relation("Followings")
  followers       Follow[]           @relation("Followers")
  userLikedArtist UserLikedArtist[]
  comments        Comment[]
  recommendations UserRecommendSong[] @relation("Sender")
  receivedSongs   UserRecommendSong[] @relation("Receiver")
  replies         RecommendationReply[] @relation("Responder")
  ArtistComment   ArtistComment[]
}

model UserLikedArtist {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  artist_id  Int?
  user_id    Int?

  user       User?     @relation(fields: [user_id], references: [id])
  comments   ArtistComment[]
}

model Inquiry {
  id          Int       @id @default(autoincrement())
  email       String?
  description String?
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt
}

model Comment {
  id                     Int       @id @default(autoincrement())
  emoji                  String?
  description            String?
  updated_at             DateTime? @updatedAt
  user_recommend_song_id Int?

  userRecommendSong      UserRecommendSong? @relation(fields: [user_recommend_song_id], references: [id])
  user_id                Int?
  User                   User? @relation(fields: [user_id], references: [id])
}

model Sing {
  id      Int @id @default(autoincrement())
  song_id Int?
}

model RecommendSong {
  id   Int    @id @default(autoincrement())
  name String?

  userRecommendations UserRecommendSong[]
}

model Notification {
  id           Int               @id @default(autoincrement())
  title        String?
  description  String?
  created_at   DateTime?         @default(now())
  updated_at   DateTime?         @updatedAt
  type         NotificationType?
  reference_id Int
  receiver_id  Int?
  is_read      Boolean?
}

model RecommendationReply {
  id                     Int       @id @default(autoincrement())
  description            String?
  created_at             DateTime? @default(now())
  updated_at             DateTime? @updatedAt
  user_recommend_song_id Int
  responder_id           Int?

  userRecommendSong      UserRecommendSong @relation(fields: [user_recommend_song_id], references: [id])
  responder              User?              @relation("Responder", fields: [responder_id], references: [id])
}

model UserRecommendSong {
  id                Int       @id @default(autoincrement())
  sender_id         Int?
  recommend_song_id Int?
  created_at        DateTime? @default(now())
  is_anoymous       Boolean?
  is_using_AI       Boolean?
  receiver_id       Int?
  is_liked          Boolean?

  sender            User?      @relation("Sender", fields: [sender_id], references: [id])
  receiver          User?      @relation("Receiver", fields: [receiver_id], references: [id])
  recommendSong     RecommendSong? @relation(fields: [recommend_song_id], references: [id])
  comments          Comment[]
  replies           RecommendationReply[]
}

model Follow {
  id            Int       @id @default(autoincrement())
  follower_id   Int?
  following_id  Int?
  created_at    DateTime? @default(now())
  user_id       Int?

  follower      User?     @relation("Followings", fields: [follower_id], references: [id])
  following     User?     @relation("Followers", fields: [following_id], references: [id])
}

model Post {
  id         Int       @id @default(autoincrement())
  content    String?
  media_urls String[]
  like       Int?
  is_editied Boolean?
  visibility String?
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  user_id    Int?
  user       User?     @relation(fields: [user_id], references: [id])
  bookmarks  Bookmark[]
}

model Bookmark {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now())

  post_id    Int
  user_id    Int?

  post       Post      @relation(fields: [post_id], references: [id])
  user       User?     @relation(fields: [user_id], references: [id])
}

model ArtistComment {
  id                 Int       @id @default(autoincrement())
  content            String?
  created_at         DateTime? @default(now())

  user_liked_artist_id Int?
  user_id              Int?

  userLikedArtist      UserLikedArtist? @relation(fields: [user_liked_artist_id], references: [id])
  user                 User?            @relation(fields: [user_id], references: [id])
}
