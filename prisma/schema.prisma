generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserLikedArtist {
  id             String    @id @unique @default(uuid())
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  artistId       String    @map("artist_id")
  userId         String    @map("user_id")
  inactiveAt     DateTime? @map("inactive_at")
  inactiveStatus Boolean   @default(false) @map("inactive_status")
  artist         Artist    @relation(fields: [artistId], references: [id])
  user           User      @relation(fields: [userId], references: [id])
  artist         Artist    @relation(fields: [artistId], references: [id])
}

model Inquiry {
  id        String   @id @unique @default(uuid())
  email     String   @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  content   String
  name      String
}

model RecomsSong {
  id              String           @id @unique
  title           String           @db.VarChar(100)
  artistName      String           @map("artist_name")
  imgUrl          String?          @map("img_url")
  previewUrl      String?          @map("preview_url")
  sings           Sing[]
  userRecomsSongs UserRecomsSong[]
}

model Sing {
  id           String     @id @unique @default(uuid())
  recomsSongId String     @map("recoms_song_id")
  artistId     String     @map("artist_id")
  artist       Artist     @relation(fields: [artistId], references: [id])
  recomsSong   RecomsSong @relation(fields: [recomsSongId], references: [id])
}

model Artist {
  id              String            @id @unique
  name            String            @db.VarChar(100)
  imgUrl          String?           @map("img_url")
  sings           Sing[]
  userLikedArtist UserLikedArtist[]
}

model Notification {
  id          String     @id @unique @default(uuid())
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  referenceId String     @map("reference_id")
  receiverId  String     @map("receiver_id")
  content     String
  isConfirmed Boolean    @default(false) @map("is_confirmed")
  link        String?
  senderId    String?    @map("sender_id")
  type        NoticeType
  receiver    User       @relation("NotificationReceiver", fields: [receiverId], references: [id])
  sender      User?      @relation("NotificationSender", fields: [senderId], references: [id])
}

model RecomsReply {
  id               String         @id @unique @default(uuid())
  content          String
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  userRecomsSongId String         @unique @map("user_recoms_song_id")
  responderId      String         @map("responder_id")
  responder        User           @relation(fields: [responderId], references: [id])
  userRecomsSong   UserRecomsSong @relation(fields: [userRecomsSongId], references: [id])
}

model UserRecomsSong {
  id           String       @id @unique @default(uuid())
  senderId     String       @map("sender_id")
  recomsSongId String       @map("recoms_song_id")
  receiverId   String?      @map("receiver_id")
  createdAt    DateTime     @default(now()) @map("created_at")
  isAnoymous   Boolean      @default(false) @map("is_anoymous")
  isLiked      Boolean?     @map("is_liked")
  comment      String
  replies      RecomsReply?
  receiver     User?        @relation("UserReceivedRecom", fields: [receiverId], references: [id])
  recomsSong   RecomsSong   @relation(fields: [recomsSongId], references: [id])
  sender       User         @relation("UserSentRecom", fields: [senderId], references: [id])
}

model User {
  id              String            @id @unique @default(uuid())
  socialType      SocialType        @map("social_type")
  nickname        String?           @db.VarChar(40)
  birth           DateTime?
  gender          Gender?           @default(MAN)
  photo           String?
  bio             String?
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  inactiveAt      DateTime?         @map("inactive_at")
  inactiveStatus  Boolean           @default(false) @map("inactive_status")
  backgroundImg   String?           @map("background_img")
  ownId           String?           @unique @map("own_id")
  recomsTime      String            @default("0900") @map("recoms_time")
  email           String
  name            String
  isDelivered     Boolean           @default(false) @map("is_delivered")
  fcmTokens       FcmToken[]
  receivedNotices Notification[]    @relation("NotificationReceiver")
  sentNotices     Notification[]    @relation("NotificationSender")
  notifications   NotificationType?
  recomsReplies   RecomsReply[]
  likedArtist     UserLikedArtist[]
  receivedRecoms  UserRecomsSong[]  @relation("UserReceivedRecom")
  sentRecoms      UserRecomsSong[]  @relation("UserSentRecom")

  @@index([isDelivered, recomsTime])
}

model FcmToken {
  id        String   @id @unique @default(uuid())
  fcmToken  String   @map("fcm_token") @db.VarChar(512)
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])
}

model Session {
  id        String   @id @default(uuid())
  sid       String   @unique
  data      String
  expiresAt DateTime @map("expires_at")

  @@map("session")
}

model NotificationType {
  id             String  @id @unique @default(uuid())
  userId         String  @unique @map("user_id")
  recomsReceived Boolean @default(true) @map("recoms_received")
  recomsSent     Boolean @default(true) @map("recoms_sent")
  commentArrived Boolean @default(true) @map("comment_arrived")
  notRecoms      Boolean @default(true) @map("not_recoms")
  announcement   Boolean @default(true)
  user           User    @relation(fields: [userId], references: [id])
}

enum Gender {
  MAN
  WOMAN
}

enum SocialType {
  NAVER
  KAKAO
  GOOGLE
}

enum NoticeType {
  RECOMS_RECEIVED
  RECOMS_SENT
  COMMENT_ARRIVED
  NOT_RECOMS
  ANNOUNCEMENT
}
